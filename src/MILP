# CoCalc Examples Documentation File
# Copyright: SageMath Inc., 2015--2016
# License:   Creative Commons: Attribution-ShareAlike 4.0 International (CC BY-SA 4.0)
---
language: sage
category: Mixed Integer and Linear Programming
---
title: Simple Linear Program
descr: |
  This is an example of solving a linear program.
  Begin by defining the linear program and indicating whether you aim for maximization.
  Then, define a variable and add constraints and an objective function.
  The Sage Reference guide to linear programming is here: http://doc.sagemath.org/html/en/thematic_tutorials/linear_programming.html
code:  |
    p=MixedIntegerLinearProgram(maximization=True)
    x=p.new_variable()
    p.add_constraint(3*x[1]+x[2]<=10)
    p.add_constraint(x[1]+2*x[2]<=5)
    p.set_objective(x[1]+x[2])
    p.solve()
    p.get_values(x)
---
title: Matrix Linear Program
code:  |
    p=MixedIntegerLinearProgram(maximization=True)
    x=p.new_variable()
    A=matrix(2,2,[3,1,1,2])
    b=vector([10,5])
    p.set_objective(x[0]+x[1])
    p.add_constraint(A*x<=b)
    p.solve()
    p.get_values(x)
descr: You can easily define the linear program using a matrix.
---
title: Index Variables with Dictionary
code:  |
    p=MixedIntegerLinearProgram(maximization=False)
    x=p.new_variable(nonnegative=True)
    p.set_objective(0.75*x['a']+0.32*x['b'])
    p.add_constraint(376*x['a'] + 190*x['b']>=2000)

    p.add_constraint(18*x['a'] + 7*x['b']>=44)
    p.add_constraint(10.5*x['a'] + 3*x['b']>=50)
    p.solve()
    p.get_values(x)
descr: Sage allows variables to in linear programs to be indexed conveniently with a dictionary.
---
title: Integer program
code:  |
    p=MixedIntegerLinearProgram(maximization=False)
    x=p.new_variable(integer=True)
    p.set_objective(0.75*x['a']+0.32*x['b'])
    p.add_constraint(376*x['a'] + 190*x['b']>=2000)

    p.add_constraint(18*x['a'] + 7*x['b']>=44)
    p.add_constraint(10.5*x['a'] + 3*x['b']>=50)
    p.solve()
    p.get_values(x)
descr: This example solves an integer program.
---
title: Magic Square
code:  |
    p=MixedIntegerLinearProgram()
    x=p.new_variable(binary=True)
    n=3 # dimension of magic square
    M=n*(n^2+1)/2
    # each row must add up to M
    for i in range(0,n):
        p.add_constraint(add([k*x[i,j,k] for j in range(0,n) for k in range(1,n^2+1)]) == M)
    # each column must add up to M
    for j in range(0,n):
        p.add_constraint(add([k*x[i,j,k] for i in range(0,n) for k in range(1,n^2+1)]) == M)
    # diagonals must add up to v
    p.add_constraint(add([k*x[i,i,k] for i in range(0,n) for k in range(1,n^2+1)]) == M)
    p.add_constraint(add([k*x[n-1-i,i,k] for i in range(0,n) for k in range(1,n^2+1)]) == M)
    # each integer must be used just once
    for k in range(1,n^2+1):
        p.add_constraint(add([x[i,j,k] for i in range(0,n) for j in range(0,n)])==1)
    # each position contains only one integer
    for i in range(0,n):
        for j in range(0,n):
            p.add_constraint(add([x[i,j,k] for k in range(1,n^2+1)]) ==1 )
    p.solve()
    ans=p.get_values(x)
    m=matrix(n,n)
    for i in range(0,n):
        for j in range(0,n):
            for k in range(1,n^2+1):
                if ans[(i,j,k)]>0:
                    m[i,j]=k
    show(m)
descr: This example creates an $n\times n$ magic square.
